cbind(clust_defA)
levels(clust_ataqueA)
clust_ataqueA
clust_ataqueA %>% as.factor()
clust_ataqueA %>% as.factor() %>% levels
clust_ataqueA %>% as.factor() %>% levels %>% length()
ataquesA_defesasB <- jogo[stri_detect_fixed(ataque_posse, '_EA'),] %>%
cbind(clust_ataqueA %>% as.factor()) %>%
cbind(clust_defB %>% as.factor())
clust_ataqueA <- as.factor(clust_ataqueA)
clust_ataqueB <-  as.factor(clust_ataqueB)
clust_defA <- as.factor(clust_defA)
clust_defB <- as.factor(clust_defB)
ataquesA_defesasB <- jogo[stri_detect_fixed(ataque_posse, '_EA'),] %>%
cbind(clust_ataqueA) %>%
cbind(clust_defB)
ataquesB_defesasA <- jogo[stri_detect_fixed(ataque_posse, '_EB'),] %>%
cbind(clust_ataqueB) %>%
cbind(clust_defA)
clust_ataqueA
clusters <- clust_ataqueA
n_clusts <- clust_ataqueA %>% levels() %>% length()
n_clusts
ataquesA
pcas <- list()
append(pcas, 1)
append(pcas, 1)
append(pcas, 1)
pcas <- append(pcas, 1)
pcas <- append(pcas, 1)
pcas
pcas <- append(pcas, 2)
pcas
pca
k = 1
ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k]
ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k,]
ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k,] %>% colnames
ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k,]$periodo
ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k,] %>% colnames
5:ncol(ataquesA_defesasB)
5:ncol(ataquesA_defesasB)[-7]
5:ncol(ataquesA_defesasB)[-3]
5:ncol(ataquesA_defesasB)
c(5,6, 8:ncol(ataquesA_defesasB)
)
clusters <- clust_ataqueA
n_clusts <- clust_ataqueA %>% levels() %>% length()
pcas <- list()
for(k in 1:n_clusts){
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, c(5,6, 8:ncol(ataquesA_defesasB))]
pca_em_questao <- princomp(dados_em_questao)
pcas <- append(pcas, pca_em_questao)
}
is.na(jogo)
is.na(jogo) %>% sum
ataquesA_defesasB %>% colnames
for(k in 1:n_clusts){
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, c(5,6, 8:(ncol(ataquesA_defesasB)-2))]
pca_em_questao <- princomp(dados_em_questao)
pcas <- append(pcas, pca_em_questao)
}
clusters <- clust_ataqueA
n_clusts <- clust_ataqueA %>% levels() %>% length()
pcas <- list()
for(k in 1:n_clusts){
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, c(5,6, 8:(ncol(ataquesA_defesasB)-2))]
pca_em_questao <- princomp(dados_em_questao)
pcas <- append(pcas, pca_em_questao)
}
ataquesA_defesasB %>% colnames
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, c(5,6, 8:(ncol(ataquesA_defesasB)-2))]
dados_em_questao %>% nrow
dados_em_questao %>% ncol
jogo1ime_completo <- read.delim("~/Development/IME/cea2/CEA2/jogo1ime_completo.txt", na.strings="0")
#Tratamento do jogo:
jogo <- read.delim("jogo1ime_completo.txt", na.strings="0")
jogo %>% colnames
ataque_posse <- paste0(jogo$ataque, '_', jogo$posse)
clust_ataqueA <- c()
clust_ataqueB <- c()
clust_defA <- c()
clust_defB <- c()
for (i in 1:nrow(jogo)){
if(grepl('_EA', ataque_posse[i])){
ataque_em_questao <- jogo$ataque[i]
cluster_em_questao <- clusters_ataques$atqA[clusters_ataques$ataque == ataque_em_questao]
clust_ataqueA <- c(clust_ataqueA, cluster_em_questao)
cluster_em_questao <- clusters_ataques$defB[clusters_ataques$ataque == ataque_em_questao]
clust_defB <- c(clust_defB, cluster_em_questao)
} else if(grepl('_EB', ataque_posse[i])){
ataque_em_questao <- jogo$ataque[i]
cluster_em_questao <- clusters_ataques$atqB[clusters_ataques$ataque == ataque_em_questao]
clust_ataqueB <- c(clust_ataqueB, cluster_em_questao)
cluster_em_questao <- clusters_ataques$defA[clusters_ataques$ataque == ataque_em_questao]
clust_defA <- c(clust_defA, cluster_em_questao)
}
}
clust_ataqueA <- as.factor(clust_ataqueA)
clust_ataqueB <-  as.factor(clust_ataqueB)
clust_defA <- as.factor(clust_defA)
clust_defB <- as.factor(clust_defB)
ataquesA_defesasB <- jogo[stri_detect_fixed(ataque_posse, '_EA'),] %>%
cbind(clust_ataqueA) %>%
cbind(clust_defB)
ataquesB_defesasA <- jogo[stri_detect_fixed(ataque_posse, '_EB'),] %>%
cbind(clust_ataqueB) %>%
cbind(clust_defA)
clusters <- clust_ataqueA
n_clusts <- clust_ataqueA %>% levels() %>% length()
pcas <- list()
ataquesA_defesasB %>% colnames
for(k in 1:n_clusts){
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, c(6,7, 9:(ncol(ataquesA_defesasB)-2))]
pca_em_questao <- princomp(dados_em_questao)
pcas <- append(pcas, pca_em_questao)
}
k = 1
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, c(6,7, 9:(ncol(ataquesA_defesasB)-2))]
pca_em_questao <- princomp(dados_em_questao)
dados_em_questao %>% colnames
dados_em_questao %>% summary
dados_em_questao %>% is.na() %>% sum
dados_em_questao %>% colnames
type(dados_em_questao$duracao)
typeof(dados_em_questao$duracao)
class(dados_em_questao$duracao)
class(dados_em_questao$qtde_acoes)
pca_em_questao <- princomp(dados_em_questao)
jogo <- na.omit(jogo)
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, c(6,7, 9:(ncol(ataquesA_defesasB)-2))]
pca_em_questao <- princomp(dados_em_questao)
pca_em_questao <- princomp(~., data=dados_em_questao, cor=TRUE)
dados_em_questao[1:10,] %>% View
dados_em_questao$qtde_acoes <- dados_em_questao$qtde_acoes %>% as.numeric()
pca_em_questao <- princomp(~., data=dados_em_questao, cor=TRUE)
dados_em_questao$duracao <- dados_em_questao$duracao %>% as.numeric()
pca_em_questao <- princomp(~., data=dados_em_questao, cor=TRUE)
dados_em_questao <- dados_em_questao[, 3:ncol(dados_em_questao)]
pca_em_questao <- princomp(~., data=dados_em_questao, cor=TRUE)
pca_em_questao <- princomp(dados_em_questao, cor=TRUE)
dados_em_questao <- dados_em_questao[, 35]
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, c(6,7, 9:(ncol(ataquesA_defesasB)-2))]
dados_em_questao <- dados_em_questao[, 12:18]
pca_em_questao <- princomp(dados_em_questao, cor=TRUE)
dados_em_questao %>% colnames
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, c(6,7, 9:(ncol(ataquesA_defesasB)-2))]
dados_em_questao %>% colnames
for(k in 1:n_clusts){
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, 3:48]
pca_em_questao <- princomp(dados_em_questao, cor=TRUE)
pcas <- append(pcas, pca_em_questao)
}
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, 3:4]
pca_em_questao <- princomp(dados_em_questao, cor=TRUE)
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, 4:5]
pca_em_questao <- princomp(dados_em_questao, cor=TRUE)
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, 5:6]
pca_em_questao <- princomp(dados_em_questao, cor=TRUE)
ataque_em_questao %>% colnames
ataquesA_defesasB %>% colnames()
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, 9:80]
pca_em_questao <- princomp(dados_em_questao, cor=TRUE)
library(psych)
pca_em_questao <- principal(dados_em_questao, fa='pc', show.legend=T)
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, 9:80]
library(BBmisc)
normalize(dados_em_questao)
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, 9:80] %>%
normalize()
pca_em_questao <- principal(dados_em_questao, fa='pc', show.legend=T)
dados_em_questao
?principal
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, 9:80] %>%
normalize()
pca_em_questao <- principal(dados_em_questao, fa='pc', show.legend=T,
covar=F)
pca_em_questao <- principal(dados_em_questao, fa='pc', show.legend=T,
covar=T)
pca_em_questao <- principal(dados_em_questao, fa='pc', show.legend=T,
scores=T, missing = T)
class(dados_em_questao)
for(coluna in colnames(dados_em_questao)){
print(class(dados_em_questao$coluna))
}
for(coluna in colnames(dados_em_questao)){
print(class(dados_em_questao[[coluna]]))
}
dados_em_questao[, ncol(dados_em_questao)]
colnames(dados_em_questao)[, ncol(dados_em_questao)]
for(coluna in colnames(dados_em_questao)){[[[[[[[[[[[[[]]]]]]]]]]]]]
colnames(dados_em_questao)[ncol(dados_em_questao)]
dados_em_questao$dEB28_cent
dados_em_questao
dados_em_questao %>% as.numeric()
for(coluna in colnames(ataquesA_defesasB)){
ataquesA_defesasB[[coluna]] <- as.numeric(ataquesA_defesasB[[coluna]])
}
library(psych)
library(BBmisc)
clusters <- clust_ataqueA
n_clusts <- clust_ataqueA %>% levels() %>% length()
pcas <- list()
for(k in 1:n_clusts){
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, 9:80] %>%
normalize()
pca_em_questao <- principal(dados_em_questao, fa='pc', show.legend=T,
scores=T, missing = T)
pcas <- append(pcas, pca_em_questao)
}
pcas
pcas[1]
for(k in 1:n_clusts){
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, 9:80] %>%
normalize()
pca_em_questao <- principal(dados_em_questao, fa='pc', show.legend=T,
scores=T, missing = T)
pcas <- append(pcas, list(pca_em_questao))
}
pcas <- c()
for(k in 1:n_clusts){
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, 9:80] %>%
normalize()
pca_em_questao <- principal(dados_em_questao, fa='pc', show.legend=T,
scores=T, missing = T)
pcas <- append(pcas, pca_em_questao)
}
pcas
pcas[1]
pcas <- list()
library(psych)
library(BBmisc)
clusters <- clust_ataqueA
n_clusts <- clust_ataqueA %>% levels() %>% length()
pcas <- list()
for(k in 1:n_clusts){
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, 9:80] %>%
normalize()
pca_em_questao <- principal(dados_em_questao, fa='pc', show.legend=T,
scores=T, missing = T)
pcas <- append(pcas, list(pca_em_questao))
}
pca
pcas
View(pcas)
pcas[[1]]
ataquesA_defesasB %>% colnames
library(psych)
library(BBmisc)
clusters <- clust_ataqueA
n_clusts <- clust_ataqueA %>% levels() %>% length()
pcas <- list()
for(k in 1:n_clusts){
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, c(6,7,9:(ncol(ataquesA_defesasB)-2))] %>%
normalize()
pca_em_questao <- principal(dados_em_questao, fa='pc', show.legend=T,
scores=T, missing = T)
pcas <- append(pcas, list(pca_em_questao))
}
pcas
pcas[[1]]
pcas[[1]]$values
pcas[[1]]$weights
pcas[[1]]$weights %>% View
pcas[[2]]$weights %>% View
pcas[[1]]$weights %>% View
pcas[[1]]$weights
pcas[[1]]$loadings
pcas[[1]] %>% summary
pcas[[1]]
clusters <- clust_ataqueA
n_clusts <- clust_ataqueA %>% levels() %>% length()
pcas <- list()
for(k in 1:n_clusts){
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, c(6,7,9:(ncol(ataquesA_defesasB)-2))] %>%
normalize()
pca_em_questao <- principal(dados_em_questao, fa='pc', show.legend=T,
scores=T, missing = T,
nfactors = 4)
pcas <- append(pcas, list(pca_em_questao))
}
pca_em_questao <- principal(dados_em_questao,
scores=T, missing = T,
nfactors = 4)
for(k in 1:n_clusts){
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, c(6,7,9:(ncol(ataquesA_defesasB)-2))] %>%
normalize()
pca_em_questao <- principal(dados_em_questao,
scores=T, missing = T,
nfactors = 4)
pcas <- append(pcas, list(pca_em_questao))
}
pcas[[1]]$loadings
ataquesA_defesasB %>% colnames()
library(psych)
library(BBmisc)
clusters <- clust_ataqueA
n_clusts <- clust_ataqueA %>% levels() %>% length()
pcas <- list()
for(k in 1:n_clusts){
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, c(6,7,9:54)] %>%
normalize()
pca_em_questao <- principal(dados_em_questao,
scores=T, missing = T,
nfactors = 4)
pcas <- append(pcas, list(pca_em_questao))
}
# criação de uma base auxiliar ligando os ataques a seus respectivos clusters
clusters_ataques <- 1:length(cl_atq1A) %>%
cbind(cl_atq1A) %>%
cbind(cl_atq1B) %>%
cbind(cl_def1A) %>%
cbind(cl_def1B) %>%
as.data.frame()
colnames(clusters_ataques) <- c('ataque', 'atqA', 'atqB', 'defA', 'defB')
#Tratamento do jogo:
jogo <- read.delim("jogo1ime_completo.txt", na.strings="0")
ataque_posse <- paste0(jogo$ataque, '_', jogo$posse)
clust_ataqueA <- c()
clust_ataqueB <- c()
clust_defA <- c()
clust_defB <- c()
for (i in 1:nrow(jogo)){
if(grepl('_EA', ataque_posse[i])){
ataque_em_questao <- jogo$ataque[i]
cluster_em_questao <- clusters_ataques$atqA[clusters_ataques$ataque == ataque_em_questao]
clust_ataqueA <- c(clust_ataqueA, cluster_em_questao)
cluster_em_questao <- clusters_ataques$defB[clusters_ataques$ataque == ataque_em_questao]
clust_defB <- c(clust_defB, cluster_em_questao)
} else if(grepl('_EB', ataque_posse[i])){
ataque_em_questao <- jogo$ataque[i]
cluster_em_questao <- clusters_ataques$atqB[clusters_ataques$ataque == ataque_em_questao]
clust_ataqueB <- c(clust_ataqueB, cluster_em_questao)
cluster_em_questao <- clusters_ataques$defA[clusters_ataques$ataque == ataque_em_questao]
clust_defA <- c(clust_defA, cluster_em_questao)
}
}
clust_ataqueA <- as.factor(clust_ataqueA)
clust_ataqueB <-  as.factor(clust_ataqueB)
clust_defA <- as.factor(clust_defA)
clust_defB <- as.factor(clust_defB)
ataquesA_defesasB <- jogo[stri_detect_fixed(ataque_posse, '_EA'),] %>%
cbind(clust_ataqueA) %>%
cbind(clust_defB)
ataquesB_defesasA <- jogo[stri_detect_fixed(ataque_posse, '_EB'),] %>%
cbind(clust_ataqueB) %>%
cbind(clust_defA)
for(coluna in colnames(ataquesA_defesasB)){
ataquesA_defesasB[[coluna]] <- as.numeric(ataquesA_defesasB[[coluna]])
}
library(psych)
library(BBmisc)
clusters <- clust_ataqueA
n_clusts <- clust_ataqueA %>% levels() %>% length()
pcas <- list()
for(k in 1:n_clusts){
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, c(6,7,9:54)] %>%
normalize()
pca_em_questao <- principal(dados_em_questao,
scores=T, missing = T,
nfactors = 4)
pcas <- append(pcas, list(pca_em_questao))
}
loadings <- pcas[[1]]$loadings
loadings
loadings[1]
loadings %>% View
loadings
loadings[]
loadings <- pcas[[1]]$loadings[]
start = jogadores[1, ]
dados_em_questao %>% colnames
jogadores <- dados_em_questao[,3:48]
start = jogadores[1, ]
start
indices_times <- c(rep('1',11), rep('2', 11))
indices_times
indices_times <- c(rep('1',11), rep('2', 11), '3', '3')
legenda_jogador <- function(xs, ys){
for(jogador in 1:22){
legend(xs[jogador]-3.6, ys[jogador]+3.9, jogador,
bty = 'n')
}
}
library(png)
ima <- readPNG('~/Development/IME/cea2/campo/background_campo.png')
ima <- readPNG('~/Development/IME/cea2/CEA2/campo/background_campo.png')
campca = start
# Chunk 1: global
#Componentes principais?
#Aqui começa o trampo que o fossa o borto e o LG pediram
# criação de uma base auxiliar ligando os ataques a seus respectivos clusters
clusters_ataques <- 1:length(cl_atq1A) %>%
cbind(cl_atq1A) %>%
cbind(cl_atq1B) %>%
cbind(cl_def1A) %>%
cbind(cl_def1B) %>%
as.data.frame()
colnames(clusters_ataques) <- c('ataque', 'atqA', 'atqB', 'defA', 'defB')
#Tratamento do jogo:
jogo <- read.delim("jogo1ime_completo.txt", na.strings="0")
# Chunk 1: global
#Componentes principais?
#Aqui começa o trampo que o fossa o borto e o LG pediram
# criação de uma base auxiliar ligando os ataques a seus respectivos clusters
clusters_ataques <- 1:length(cl_atq1A) %>%
cbind(cl_atq1A) %>%
cbind(cl_atq1B) %>%
cbind(cl_def1A) %>%
cbind(cl_def1B) %>%
as.data.frame()
colnames(clusters_ataques) <- c('ataque', 'atqA', 'atqB', 'defA', 'defB')
#Tratamento do jogo:
jogo <- read.delim("jogo1ime_completo.txt", na.strings="0")
jogadores <- dados_em_questao[,3:46]
jogadores %>% colname
jogadores %>% colnames
jogadores <- dados_em_questao[,3:48]
jogadores %>% colnames
jogadores <- dados_em_questao[,3:46]
start = jogadores[1, ]
indices_times <- c(rep('1',11), rep('2', 11))
legenda_jogador <- function(xs, ys){
for(jogador in 1:22){
legend(xs[jogador]-3.6, ys[jogador]+3.9, jogador,
bty = 'n')
}
}
library(png)
ima <- readPNG('~/Development/IME/cea2/CEA2/campo/background_campo.png')
campca = start
# selectInput("n_breaks", label = "Number of bins:",
# choices = c(10, 20, 35, 50), selected = 20)
shinyUI(
fluidRow(
column(2, sliderInput("pca1", label = "PCA 1:",
min = -20, max = 20, value = 0, step = 0.2)),
column(2, sliderInput("pca2", label = "PCA 2:",
min = -20, max = 20, value = 0, step = 0.2)),
column(2, sliderInput("pca3", label = "PCA 3:",
min = -20, max = 20, value = 0, step = 0.2)),
column(2, sliderInput("pca4", label = "PCA 4:",
min = -20, max = 20, value = 0, step = 0.2))
)
)
loadings <- pcas[[1]]$loadings
output$unsized <- renderPlot({
campca = campca + input$pca1*loadings[, 1] +
input$pca2*loadings[, 2] +
input$pca3*loadings[, 3] +
input$pca4*loadings[, 4] +
xs <- campca[seq(1, 44, 2)] %>% as.numeric()
ys <- campca[seq(2, 44, 2)] %>% as.numeric()
col <- rep(c('red', 'black'), each=11)
plot.new()
lim <- par()
rasterImage(ima, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
par(new=TRUE)
plot(ys~xs,
xlim = c(0, 105), ylim = c(0, 68),
pch = c(rep(c(15, 17), each=11), 16),
col = col, main = sprintf('Tempo: _ segundos'))
legenda_jogador(xs, ys)
})
library(magrittr)
pcas
save(pcas,
file = '~/Development/IME/cea2/CEA2/PCA_por_grupos/pcas_ataquesA_defesasB.RData')
pcas <- load('~/Development/IME/cea2/CEA2/PCA_por_grupos/pcas_ataquesA_defesasB.RData')
library(magrittr)
#Tratamento do jogo:
jogo <- read.delim("jogo1ime_completo.txt", na.strings="0")
pcas <- load('~/Development/IME/cea2/CEA2/PCA_por_grupos/pcas_ataquesA_defesasB.RData')
loadings <- pcas[[1]]$loadings
pcas
load('~/Development/IME/cea2/CEA2/PCA_por_grupos/pcas_ataquesA_defesasB.RData')
loadings <- pcas[[1]]$loadings
jogadores <- dados_em_questao[,3:46]
ataque_posse <- paste0(jogo$ataque, '_', jogo$posse)
clust_ataqueA <- c()
clust_ataqueB <- c()
clust_defA <- c()
clust_defB <- c()
for (i in 1:nrow(jogo)){
if(grepl('_EA', ataque_posse[i])){
ataque_em_questao <- jogo$ataque[i]
cluster_em_questao <- clusters_ataques$atqA[clusters_ataques$ataque == ataque_em_questao]
clust_ataqueA <- c(clust_ataqueA, cluster_em_questao)
cluster_em_questao <- clusters_ataques$defB[clusters_ataques$ataque == ataque_em_questao]
clust_defB <- c(clust_defB, cluster_em_questao)
} else if(grepl('_EB', ataque_posse[i])){
ataque_em_questao <- jogo$ataque[i]
cluster_em_questao <- clusters_ataques$atqB[clusters_ataques$ataque == ataque_em_questao]
clust_ataqueB <- c(clust_ataqueB, cluster_em_questao)
cluster_em_questao <- clusters_ataques$defA[clusters_ataques$ataque == ataque_em_questao]
clust_defA <- c(clust_defA, cluster_em_questao)
}
}
source('Agrupamento.R')
source('~/Development/IME/cea2/CEA2/Agrupamento.R')
source('~/Development/IME/cea2/CEA2/Agrupamento.R')
source('~/Development/IME/cea2/CEA2/Agrupamento.R')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(sp)
library(adehabitatHR)
library(scales)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("leitura_dados_acao.R")
source("resumo_macro.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source('../Agrupamento.R')
source('~/Development/IME/cea2/CEA2/Agrupamento.R')
