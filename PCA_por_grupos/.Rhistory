library(psych)
library(BBmisc)
clusters <- clust_defA
n_clusts <- clust_defA %>% levels() %>% length()
pcas <- list()
loadings <- list()
ataquesB_defesasA %>% colnames()
# Mudar aqui se eh ataque ou defesa pro time A ou pro time B
library(psych)
library(BBmisc)
clusters <- clust_defA
n_clusts <- clust_defA %>% levels() %>% length()
pcas <- list()
loadings <- list()
for(k in 1:n_clusts){
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)]
#mudar pra 31 pra times separadaos e 54 pros dois times:s
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, c(6,7,9:47)] %>%
normalize()
pca_em_questao <- principal(dados_em_questao,
scores=T, missing = T,
nfactors = 4)
pcas <- append(pcas, list(pca_em_questao))
loadings <- loadings %>%
append(list(pca_em_questao$loadings[]))
}
for(k in 1:n_clusts){
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)]
#mudar pra 31 pra times separadaos e 54 pros dois times:s
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, c(6,7,9:47)] %>%
normalize()
pca_em_questao <- principal(dados_em_questao,
scores=T, missing = F,
nfactors = 4)
pcas <- append(pcas, list(pca_em_questao))
loadings <- loadings %>%
append(list(pca_em_questao$loadings[]))
}
ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)][!is.na(ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)]),]
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)]
dados_em_questao_nao_normalizados
is.na(dados_em_questao_nao_normalizados)
!is.na(dados_em_questao_nao_normalizados)
dados_em_questao_nao_normalizados <- dados_em_questao_nao_normalizados[!is.na(dados_em_questao_nao_normalizados)]
dados_em_questao <- dados_em_questao[!is.na(dados_em_questao)]
# Mudar aqui se eh ataque ou defesa pro time A ou pro time B
library(psych)
library(BBmisc)
clusters <- clust_defA
n_clusts <- clust_defA %>% levels() %>% length()
pcas <- list()
loadings <- list()
for(k in 1:n_clusts){
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)]
dados_em_questao_nao_normalizados <- dados_em_questao_nao_normalizados[!is.na(dados_em_questao_nao_normalizados)]
#mudar pra 31 pra times separadaos e 54 pros dois times:s
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, c(6,7,9:47)] %>%
normalize()
dados_em_questao <- dados_em_questao[!is.na(dados_em_questao)]
pca_em_questao <- principal(dados_em_questao,
scores=T, missing = T,
nfactors = 4)
pcas <- append(pcas, list(pca_em_questao))
loadings <- loadings %>%
append(list(pca_em_questao$loadings[]))
}
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)]
dados_em_questao_nao_normalizados <- dados_em_questao_nao_normalizados[!is.na(dados_em_questao_nao_normalizados)]
#mudar pra 31 pra times separadaos e 54 pros dois times:s
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, c(6,7,9:47)] %>%
normalize()
dados_em_questao <- dados_em_questao[!is.na(dados_em_questao)]
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)]
dados_em_questao_nao_normalizados <- dados_em_questao_nao_normalizados[!is.na(dados_em_questao_nao_normalizados)]
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)]
dados_em_questao_nao_normalizados <- dados_em_questao_nao_normalizados[!is.na(dados_em_questao_nao_normalizados)]
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)]
dados_em_questao_nao_normalizados <- dados_em_questao_nao_normalizados[!is.na(dados_em_questao_nao_normalizados),]
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit()
#mudar pra 31 pra times separadaos e 54 pros dois times:s
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, c(6,7,9:47)] %>%
na.omit() %>%
normalize()
pca_em_questao <- principal(dados_em_questao,
scores=T, missing = T,
nfactors = 4)
pca_em_questao <- principal(dados_em_questao,
scores=T, missing = F,
nfactors = 4)
dados_em_questao %>% View
dados_em_questao %>% is.na
dados_em_questao %>% is.na %>% sum
library(BBmisc)
clusters <- clust_defA
n_clusts <- clust_defA %>% levels() %>% length()
pcas <- list()
loadings <- list()
for(k in 1:n_clusts){
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit()
#mudar pra 31 pra times separadaos e 54 pros dois times:s
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, c(6,7,9:47)] %>%
na.omit() %>%
normalize()
pca_em_questao <- principal(dados_em_questao,
scores=T, missing = T,
nfactors = 4)
pcas <- append(pcas, list(pca_em_questao))
loadings <- loadings %>%
append(list(pca_em_questao$loadings[]))
}
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit()
#mudar pra 31 pra times separadaos e 54 pros dois times:s
dados_em_questao <- ataquesA_defesasB[ataquesA_defesasB$clust_ataqueA == k, c(6,7,9:47)] %>%
na.omit() %>%
normalize()
pca_em_questao <- principal(dados_em_questao,
scores=T, missing = T,
nfactors = 4)
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit()
#mudar pra 31 pra times separadaos e 54 pros dois times:s
dados_em_questao <- ataquesA_defesasB[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit() %>%
normalize()
pca_em_questao <- principal(dados_em_questao,
scores=T, missing = T,
nfactors = 4)
# Mudar aqui se eh ataque ou defesa pro time A ou pro time B
library(psych)
library(BBmisc)
clusters <- clust_defA
n_clusts <- clust_defA %>% levels() %>% length()
pcas <- list()
loadings <- list()
for(k in 1:n_clusts){
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit()
#mudar pra 31 pra times separadaos e 54 pros dois times:s
dados_em_questao <- ataquesA_defesasB[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit() %>%
normalize()
pca_em_questao <- principal(dados_em_questao,
scores=T, missing = T,
nfactors = 4)
pcas <- append(pcas, list(pca_em_questao))
loadings <- loadings %>%
append(list(pca_em_questao$loadings[]))
}
# Mudar aqui se eh ataque ou defesa pro time A ou pro time B
library(psych)
library(BBmisc)
clusters <- clust_defA
n_clusts <- clust_defA %>% levels() %>% length()
pcas <- list()
loadings <- list()
# Mudar aqui se eh ataque ou defesa pro time A ou pro time B
library(psych)
library(BBmisc)
clusters <- clust_defA
n_clusts <- clust_defA %>% levels() %>% length()
pcas <- list()
loadings <- list()
for(k in 1:n_clusts){
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit()
#mudar pra 31 pra times separadaos e 54 pros dois times:s
dados_em_questao <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit() %>%
normalize()
pca_em_questao <- principal(dados_em_questao,
scores=T, missing = T,
nfactors = 4)
pcas <- append(pcas, list(pca_em_questao))
loadings <- loadings %>%
append(list(pca_em_questao$loadings[]))
}
dados_em_questao %>% VIew
dados_em_questao %>% View
clusters <- clust_defA
clusters
ataquesB_defesasA$clust_defA <- clusters
dados_em_questao %>% View
n_clusts <- clust_defA %>% levels() %>% length()
pcas <- list()
loadings <- list()
for(k in 1:n_clusts){
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit()
#mudar pra 31 pra times separadaos e 54 pros dois times:s
dados_em_questao <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit() %>%
normalize()
pca_em_questao <- principal(dados_em_questao,
scores=T, missing = T,
nfactors = 4)
pcas <- append(pcas, list(pca_em_questao))
loadings <- loadings %>%
append(list(pca_em_questao$loadings[]))
}
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit()
#mudar pra 31 pra times separadaos e 54 pros dois times:s
dados_em_questao <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit() %>%
normalize()
k
#mudar pra 31 pra times separadaos e 54 pros dois times:s
dados_em_questao <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit() %>%
normalize()
pca_em_questao <- principal(dados_em_questao,
scores=T, missing = T,
nfactors = 4)
dados_em_questao %>% View
# criação de uma base auxiliar ligando os ataques a seus respectivos clusters
clusters_ataques <- 1:length(cl_atq1A) %>%
cbind(cl_atq1A) %>%
cbind(cl_atq1B) %>%
cbind(cl_def1A) %>%
cbind(cl_def1B) %>%
as.data.frame()
colnames(clusters_ataques) <- c('ataque', 'atqA', 'atqB', 'defA', 'defB')
ataque_posse <- paste0(jogo$ataque, '_', jogo$posse)
clust_ataqueA <- c()
clust_ataqueB <- c()
clust_defA <- c()
clust_defB <- c()
for (i in 1:nrow(jogo)){
if(grepl('_EA', ataque_posse[i])){
ataque_em_questao <- jogo$ataque[i]
cluster_em_questao <- clusters_ataques$atqA[clusters_ataques$ataque == ataque_em_questao]
clust_ataqueA <- c(clust_ataqueA, cluster_em_questao)
cluster_em_questao <- clusters_ataques$defB[clusters_ataques$ataque == ataque_em_questao]
clust_defB <- c(clust_defB, cluster_em_questao)
} else if(grepl('_EB', ataque_posse[i])){
ataque_em_questao <- jogo$ataque[i]
cluster_em_questao <- clusters_ataques$atqB[clusters_ataques$ataque == ataque_em_questao]
clust_ataqueB <- c(clust_ataqueB, cluster_em_questao)
cluster_em_questao <- clusters_ataques$defA[clusters_ataques$ataque == ataque_em_questao]
clust_defA <- c(clust_defA, cluster_em_questao)
}
}
clust_ataqueA <- as.factor(clust_ataqueA)
clust_ataqueB <-  as.factor(clust_ataqueB)
clust_defA <- as.factor(clust_defA)
clust_defB <- as.factor(clust_defB)
library(stringi)
ataquesA_defesasB <- jogo[stri_detect_fixed(ataque_posse, '_EA'),] %>%
cbind(clust_ataqueA) %>%
cbind(clust_defB)
ataquesB_defesasA <- jogo[stri_detect_fixed(ataque_posse, '_EB'),] %>%
cbind(clust_ataqueB) %>%
cbind(clust_defA)
#aqui eu vou filtrar a prte da base de dados que só tem o time A pro ataque do time A, por exemplo (e assim vai)
ataquesA_defesasB <- ataquesA_defesasB[, c(1:30, 53:56, 59:70, 81)]
ataquesB_defesasA <- ataquesB_defesasA[, c(1:30, 53:56, 59:70, 82)]
for(coluna in colnames(ataquesA_defesasB)){
ataquesA_defesasB[[coluna]] <- as.numeric(ataquesA_defesasB[[coluna]])
}
for(coluna in colnames(ataquesB_defesasA)){
ataquesB_defesasA[[coluna]] <- as.numeric(ataquesB_defesasA[[coluna]])
}
# Mudar aqui se eh ataque ou defesa pro time A ou pro time B
library(psych)
library(BBmisc)
clusters <- clust_defA
ataquesB_defesasA$clust_defA <- clusters
n_clusts <- clust_defA %>% levels() %>% length()
pcas <- list()
loadings <- list()
for(k in 1:n_clusts){
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit()
#mudar pra 31 pra times separadaos e 54 pros dois times:s
dados_em_questao <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit() %>%
normalize()
pca_em_questao <- principal(dados_em_questao,
scores=T, missing = T,
nfactors = 4)
pcas <- append(pcas, list(pca_em_questao))
loadings <- loadings %>%
append(list(pca_em_questao$loadings[]))
}
ataquesB_defesasA$duracao
ataquesB_defesasA$duracao %>% levels()
ataquesB_defesasA[1,]
ataquesB_defesasA[1,] %>% VIew
ataquesB_defesasA[1,] %>% View
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit()
#mudar pra 31 pra times separadaos e 54 pros dois times:s
dados_em_questao <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit() %>%
normalize()
dados_em_questao[1,] %>% View
clust_ataqueA <- as.factor(clust_ataqueA)
clust_ataqueB <-  as.factor(clust_ataqueB)
clust_defA <- as.factor(clust_defA)
clust_defB <- as.factor(clust_defB)
library(stringi)
ataquesA_defesasB <- jogo[stri_detect_fixed(ataque_posse, '_EA'),] %>%
cbind(clust_ataqueA) %>%
cbind(clust_defB)
ataquesB_defesasA <- jogo[stri_detect_fixed(ataque_posse, '_EB'),] %>%
cbind(clust_ataqueB) %>%
cbind(clust_defA)
ataquesB_defesasA %>% colnames
#aqui eu vou filtrar a prte da base de dados que só tem o time A pro ataque do time A, por exemplo (e assim vai)
ataquesA_defesasB <- ataquesA_defesasB[, c(1:30, 53:56, 59:70, 81)]
ataquesB_defesasA <- ataquesB_defesasA[, c(1:30, 53:56, 59:70, 82)]
for(coluna in colnames(ataquesB_defesasA)){
ataquesB_defesasA[[coluna]] <- as.numeric(ataquesB_defesasA[[coluna]])
}
# Mudar aqui se eh ataque ou defesa pro time A ou pro time B
library(psych)
library(BBmisc)
clusters <- clust_defA
n_clusts <- clust_defA %>% levels() %>% length()
clust_ataqueA <- as.factor(clust_ataqueA)
clust_ataqueB <-  as.factor(clust_ataqueB)
clust_defA <- as.factor(clust_defA)
clust_defB <- as.factor(clust_defB)
library(stringi)
ataquesA_defesasB <- jogo[stri_detect_fixed(ataque_posse, '_EA'),] %>%
cbind(clust_ataqueA) %>%
cbind(clust_defB)
ataquesB_defesasA <- jogo[stri_detect_fixed(ataque_posse, '_EB'),] %>%
cbind(clust_ataqueB) %>%
cbind(clust_defA)
#aqui eu vou filtrar a prte da base de dados que só tem o time A pro ataque do time A, por exemplo (e assim vai)
ataquesA_defesasB <- ataquesA_defesasB[, c(1:30, 53:56, 59:70, 81)]
ataquesB_defesasA <- ataquesB_defesasA[, c(1:30, 53:56, 59:70, 82)]
for(coluna in colnames(ataquesA_defesasB)){
ataquesA_defesasB[[coluna]] <- as.numeric(ataquesA_defesasB[[coluna]])
}
for(coluna in colnames(ataquesB_defesasA)){
ataquesB_defesasA[[coluna]] <- as.numeric(ataquesB_defesasA[[coluna]])
}
# Mudar aqui se eh ataque ou defesa pro time A ou pro time B
library(psych)
library(BBmisc)
# Mudar aqui se eh ataque ou defesa pro time A ou pro time B
library(psych)
library(BBmisc)
clusters <- clust_defA
n_clusts <- clust_defA %>% levels() %>% length()
pcas <- list()
ataquesB_defesasA$clust_defA
clusters <- clust_defA
n_clusts <- clust_defA %>% levels() %>% length()
pcas <- list()
loadings <- list()
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit()
#mudar pra 31 pra times separadaos e 54 pros dois times:s
dados_em_questao <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit() %>%
normalize()
pca_em_questao <- principal(dados_em_questao,
scores=T, missing = T,
nfactors = 4)
ataquesB_defesasA$clust_defA <- clusters %>% as.numeric
ataquesB_defesasA$clust_defA
ataquesB_defesasA$clust_defA %>% levels
# Mudar aqui se eh ataque ou defesa pro time A ou pro time B
library(psych)
library(BBmisc)
clusters <- clust_defA
ataquesB_defesasA$clust_defA <- clusters %>% as.numeric
n_clusts <- clust_defA %>% levels() %>% length()
pcas <- list()
loadings <- list()
for(k in 1:n_clusts){
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit()
#mudar pra 31 pra times separadaos e 54 pros dois times:s
dados_em_questao <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit() %>%
normalize()
pca_em_questao <- principal(dados_em_questao,
scores=T, missing = T,
nfactors = 4)
pcas <- append(pcas, list(pca_em_questao))
loadings <- loadings %>%
append(list(pca_em_questao$loadings[]))
}
dados_em_questao %>% View
k = 1
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit()
#mudar pra 31 pra times separadaos e 54 pros dois times:s
dados_em_questao <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%
na.omit() %>%
normalize()
dados_em_questao_nao_normalizados <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)]
#mudar pra 31 pra times separadaos e 54 pros dois times:s
dados_em_questao <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%     normalize()
dados_em_questao %>% View
k = 1
#mudar pra 31 pra times separadaos e 54 pros dois times:s
dados_em_questao <- ataquesB_defesasA[ataquesB_defesasA$clust_defA == k, c(6,7,9:47)] %>%     normalize()
ataquesB_defesasA$clust_defA
ataquesB_defesasA$clust_defA
ataquesB_defesasA$clust_defA == 0
ataquesB_defesasA$clust_defA == 0 %>% sum
ataquesB_defesasA$clust_defA == 0 %>% sum()
library(magrittr)
jogo1 <- read.delim("~/Development/IME/cea2/CEA2/jogo1acao.txt", header=TRUE) %>%
rbind(read.delim("~/Development/IME/cea2/CEA2/jogo2acao.txt", header=TRUE)) %>%
rbind(read.delim("~/Development/IME/cea2/CEA2/jogo3acao.txt", header=TRUE)) %>%
rbind(read.delim("~/Development/IME/cea2/CEA2/jogo4acao.txt", header=TRUE)) %>%
rbind(read.delim("~/Development/IME/cea2/CEA2/jogo5acao.txt", header=TRUE))
ataques <- rbind(atq1.A, atq1.B,
atq2.A, atq2.B,
atq3.A, atq3.B,
atq4.A, atq4.B,
atq5.A, atq5.B)
jogo1 <- read.delim("~/Development/IME/cea2/CEA2/jogo1acao.txt", header=TRUE) %>%
rbind(read.delim("~/Development/IME/cea2/CEA2/jogo2acao.txt", header=TRUE)) %>%
rbind(read.delim("~/Development/IME/cea2/CEA2/jogo3acao.txt", header=TRUE)) %>%
rbind(read.delim("~/Development/IME/cea2/CEA2/jogo4acao.txt", header=TRUE)) %>%
rbind(read.delim("~/Development/IME/cea2/CEA2/jogo5acao.txt", header=TRUE))
ataques <- rbind(atq1.A, atq1.B,
atq2.A, atq2.B,
atq3.A, atq3.B,
atq4.A, atq4.B,
atq5.A, atq5.B)
library(magrittr)
#Tratamento do jogo:
load('~/Development/IME/cea2/CEA2/PCA_por_grupos/pcas_ataquesA_defesasB.RData')
load('~/Development/IME/cea2/CEA2/PCA_por_grupos/dados_em_questao.RData')
jogadores <- dados_em_questao_nao_normalizados[,3:24]
start = jogadores[1,]
indices_times <- c(rep('1',11))
legenda_jogador <- function(xs, ys){
for(jogador in 1:11){
legend(xs[jogador]-3.6, ys[jogador]+3.9, jogador,
bty = 'n')
}
}
library(png)
ima <- readPNG('~/Development/IME/cea2/CEA2/campo/background_campo.png')
campca = start
source('~/Development/IME/cea2/CEA2/agrupamento.R')
#Componentes principais?
library(magrittr)
library(shiny)
jogo1ime <- read.delim("~/Development/IME/cea2/CEA2/jogo1acao.txt", header=TRUE)
jogo1ime[is.na(jogo1ime)] <- 0
base_pca <- jogo1ime[, c(5, 6, 8:79)]
pca <- princomp(base_pca)
loadings <- pca$loadings
escores_por_ataque <- cbind(posse_ataque, pca$scores) %>% as.data.frame()
library(reshape2)
#teste: aqui eu tenho que ter o dataframe que indica a qual grupo cada ataque pertence
#escores_por_ataque$posse_ataque
clust <- cbind(clust, 1:length(clust)) %>% as.data.frame()
colnames(clust) <- c('grupo', 'ataque')
escores_por_ataque$grupo <- 0
for(i in 1:nrow(clust)){
escores_por_ataque$grupo[jogo1.A$ataque == clust$ataque[i]] <- clust$grupo[i]
}
for(j in 1:ncol(escores_por_ataque)){
escores_por_ataque[,j] <- as.numeric(escores_por_ataque[,j])
}
escores_por_ataque <- escores_por_ataque[, c(2:10, ncol(escores_por_ataque))]
escores_por_ataque$grupo <- as.factor(escores_por_ataque$grupo)
df.m <- melt(escores_por_ataque, id.var = "grupo")
require(ggplot2)
ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=grupo)) +
xlab('Componente') +
ylab('Escore Componente') +
theme(axis.text.x=element_text(color = "black", size=11, angle=30, vjust=.8, hjust=0.8))
# tentativa falha de fazer com as variaveis do borto abaixp:
ataque1A <- cbind(atq1.A, clust)
colnames(ataque1A) <- c(colnames(ataque1A)[1:ncol(ataque1A)-1], 'grupo')
library(BBmisc)
ataque1A[, 1:11] <- ataque1A[, 1:11] %>% normalize()
df.m <- melt(ataque1A[1:12], id.var = "grupo")
df.m$grupo <- as.factor(df.m$grupo)
require(ggplot2)
ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=grupo)) +
xlab('Variável do borto') +
ylab('Valor da variável') +
theme(axis.text.x=element_text(color = "black", size=11, angle=30, vjust=.8, hjust=0.8))
df.m <- melt(ataque1A[1:12], id.var = "grupo")
ataque1A[, 1:11] <- ataque1A[, 1:11] %>% normalize()
df.m <- melt(ataque1A[1:12], id.var = "grupo")
df.m
ataque1A
ataque1A %>% colnames
# tentativa falha de fazer com as variaveis do borto abaixp:
ataque1A <- cbind(atq1.A, clust)
ataque1A %>% colnames
colnames(ataque1A) <- c(colnames(ataque1A)[1:ncol(ataque1A)-1], 'grupo')
ataque1A[, 1:11] <- ataque1A[, 1:11] %>% normalize()
df.m <- melt(ataque1A[1:12], id.var = "grupo")
ataque1A %>% colnames
ataque1A[, 1:11] <- ataque1A[, 1:11] %>% normalize()
ataque1A <- ataque1A[, 1:13]
df.m <- melt(ataque1A[1:12], id.var = "grupo")
df.m <- melt(ataque1A[1:13], id.var = "grupo")
df.m$grupo <- as.factor(df.m$grupo)
require(ggplot2)
ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=grupo)) +
xlab('Variável do borto') +
ylab('Valor da variável') +
theme(axis.text.x=element_text(color = "black", size=11, angle=30, vjust=.8, hjust=0.8))
